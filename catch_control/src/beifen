//
// Created by yang on 3/31/19.
//
#include <ros/ros.h>
#include <tf/tf.h>
#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit_msgs/CollisionObject.h>
#include "match_demo.h"
#include <moveit_visual_tools/moveit_visual_tools.h>




int main(int argc,char **argv)
{
    ros::init(argc,argv,"mymoveit_node");
    ros::NodeHandle nh;
    ros::AsyncSpinner async_spinner(2);
    async_spinner.start();

    bool pose_orien = false;
    nh.param("pose_orien", pose_orien, false);

    UR_gripper ur5e_gripper(nh,"manipulator");
    ur5e_gripper.robotiq_hand_move(85,5,50);

    namespace rvt = rviz_visual_tools;
    moveit_visual_tools::MoveItVisualTools visual_tools("ur_world");
    visual_tools.deleteAllMarkers();
    visual_tools.loadRemoteControl();

    double hand_bias_z = 0.13, softhand = 0.125;
    std::vector<double> bottle_x_y_z;

    KDL::Frame base2ur_world;
    base2ur_world.p = KDL::Vector(-0.01 ,0.377 ,0.808);
    base2ur_world.M = KDL::Rotation::RPY(0,0,1.570796327);

    std::string PLANNING_GROUP = "manipulator";
    moveit::planning_interface::MoveGroupInterface move_group(PLANNING_GROUP);
    moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
    std::vector<std::string> joint_name;
    joint_name = move_group.getJointNames();
    move_group.allowReplanning(true);
    move_group.setGoalPositionTolerance(0.001);
    move_group.setGoalOrientationTolerance(0.01);

    ROS_INFO_STREAM("planning frame: "<< ur5e_gripper.move_group->getPlanningFrame(); );

//    初始位姿pose表示
//    geometry_msgs::Pose start_pose;
//    tf::Quaternion start_quat;
//    start_quat.setRPY(M_PI,0,0);
//    start_pose.position.x = 0.44;
//    start_pose.position.y = 0.03;
//    start_pose.position.z = 1.1;
//    start_pose.orientation.x = start_quat.x();
//    start_pose.orientation.y = start_quat.y();
//    start_pose.orientation.z = start_quat.z();
//    start_pose.orientation.w = start_quat.w();
//
//    move_group.setPoseTarget(start_pose);
//    move_group.move();

    double joint_satrt_arr[] = { 1.15, -1.82, -1.81, -1.09, 1.56, -0.91 };
    std::vector<double> joint_start(joint_satrt_arr, joint_satrt_arr + 6);
    move_group.setJointValueTarget(joint_start);

    moveit::planning_interface::MoveGroupInterface::Plan start_plan;
    bool success3 = (move_group.plan(start_plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);
    visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to continue the demo");
    move_group.execute(start_plan);
//    move_group.move();


    double rgb_box_position[3];


    if(pose_orien)
    {
            do{
                ros::spinOnce();
            }while(! ur5e_gripper.get_box_frame);

    }
    else{
        //    彩色物体位置
        ur5e_gripper.get_camera_rgb = false;
        do{
            ros::spinOnce();
        }while(!ur5e_gripper.get_camera_rgb);
        ros::Duration(1).sleep();
        rgb_box_position[0] = ur5e_gripper.camera_box_position_rgb[0];
        rgb_box_position[1] = ur5e_gripper.camera_box_position_rgb[1];
        rgb_box_position[2] = ur5e_gripper.camera_box_position_rgb[2];
    }



    ros::Duration(1).sleep();
    KDL::Frame grasp_frame = ur5e_gripper.grasp_frame_bef;
    double bottle_center[] = { grasp_frame.p.x(), grasp_frame.p.y(), grasp_frame.p.z()};

    double bottle_size[] = { 0.116 , 0.033};   //易拉罐高 半径
    KDL::Frame grasp_frame_urWorld = base2ur_world * grasp_frame;

    //    发布物体
    moveit_msgs::CollisionObject collision_object;
//    ur5e_gripper.add_box(collision_object,bottle_size,bottle_center,grasp_frame_urWorld, "box1","ur_world");

//    直接规划到目标点 路径比较乱

//    geometry_msgs::Pose target_pose1;
//
//    grasp_frame_urWorld.M.GetQuaternion(target_pose1.orientation.x, target_pose1.orientation.y,
//            target_pose1.orientation.z, target_pose1.orientation.w);
//    target_pose1.position.x = grasp_frame_urWorld.p.x() - hand_bias_z * grasp_frame_urWorld.M.UnitZ().x();
//    target_pose1.position.y = grasp_frame_urWorld.p.y() - hand_bias_z * grasp_frame_urWorld.M.UnitZ().y();
//    target_pose1.position.z = grasp_frame_urWorld.p.z() - hand_bias_z * grasp_frame_urWorld.M.UnitZ().z();
//
//    move_group.setPoseTarget(target_pose1);
//    ROS_INFO("move to target pose");
//
//    move_group.setPlanningTime(10);
//    moveit::planning_interface::MoveGroupInterface::Plan my_plan;
//    bool success3 = (move_group.plan(my_plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);
//    int tries = 1;
//    while (!success3 && tries <10)
//    {
//        ROS_INFO("This is  %d th try",tries);
//        success3 = (move_group.plan(my_plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);
//        tries++;
//    }
//
//    visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to execute the demo");
//    move_group.execute(my_plan);

    ros::Duration(2).sleep();

    if(pose_orien){

//    根据瓶子的方向旋转一定角度
        std::vector<double> joint_value = move_group.getCurrentJointValues();
        geometry_msgs::Pose pose_now = move_group.getCurrentPose().pose;
        KDL::Rotation boxRot_bias_y;
        boxRot_bias_y = KDL::Rotation::Quaternion(pose_now.orientation.x, pose_now.orientation.y,
                                                      pose_now.orientation.z, pose_now.orientation.w);
        KDL::Vector ur_tool_y = boxRot_bias_y.UnitY();
        Eigen::Vector3d ur_tool_calc(ur_tool_y.x(), ur_tool_y.y(), 0);

        KDL::Vector box_y = grasp_frame_urWorld.M.UnitY();
        Eigen::Vector3d box_y_calc(box_y.x(), box_y.y(), 0);
        double rad_grasp_goal = acos( ur_tool_calc.dot(box_y_calc)/
                ( sqrt(ur_tool_calc.dot(ur_tool_calc)) * sqrt(box_y_calc.dot(box_y_calc)) ) );
        if(rad_grasp_goal > M_PI_2) {
            rad_grasp_goal = M_PI - rad_grasp_goal;
            if( (ur_tool_calc.cross(box_y_calc) )[2] < 0) {
                joint_value[5] -= rad_grasp_goal;
            } else joint_value[5] += rad_grasp_goal;
        } else {
            if( (ur_tool_calc.cross(box_y_calc) )[2] < 0) { joint_value[5] += rad_grasp_goal; }
            else joint_value[5] -= rad_grasp_goal;

        }
        ROS_INFO_STREAM("rad_grasp_goal "<<rad_grasp_goal);

    ////    中间位置
    //    if(joint_value[5] > 0)
    //    {
    //        joint_value[5] -= rad_grasp_goal;
    //    } else joint_value[5] += rad_grasp_goal;
        move_group.setJointValueTarget(joint_value);
        move_group.move();
    }



    ros::Duration(2).sleep();

//    tf::Quaternion myqu(pose_now.orientation.x, pose_now.orientation.y,
//            pose_now.orientation.z, pose_now.orientation.w);

    double point_up_bottle[] = {
            grasp_frame_urWorld.p.x() - hand_bias_z * grasp_frame_urWorld.M.UnitZ().x(),
            grasp_frame_urWorld.p.y() - hand_bias_z * grasp_frame_urWorld.M.UnitZ().y(),
            grasp_frame_urWorld.p.z() - hand_bias_z * grasp_frame_urWorld.M.UnitZ().z() + 0.15};
    double point_up_collectBox[] = { 0.44, 0.03, 1.1 };

    if(!pose_orien)
    {
        //    彩色
        double point_up_bottle_plan_rgb[] = {
                0,0,0.15,0,
                rgb_box_position[0], rgb_box_position[1], rgb_box_position[2] + 0.15 + softhand,  1,
                0,-0.01,-0.15 + softhand - 0.035,0
        };
        ur5e_gripper.com_plan_CartsianPath(point_up_bottle_plan_rgb,3);
    }
    else{
        double point_up_bottle_plan[] ={
                0,0,0.15,0,
                grasp_frame_urWorld.p.x(), grasp_frame_urWorld.p.y(), grasp_frame_urWorld.p.z() + 0.15 + softhand,  1,
                0,0,-0.15 + softhand - 0.035,0
        };

        ur5e_gripper.com_plan_CartsianPath(point_up_bottle_plan,3);
    }








//    ros::Duration(2).sleep();

//    调整姿态
//    geometry_msgs::Pose target_pose_up = move_group.getCurrentPose().pose;
//    grasp_frame_urWorld.M.GetQuaternion(target_pose_up.orientation.x, target_pose_up.orientation.y,
//                                        target_pose_up.orientation.z, target_pose_up.orientation.w);
//    move_group.setPoseTarget(target_pose_up);
//    move_group.move();
//    ros::Duration(2).sleep();

////    下降到物体上方
//    double down[] ={0,0,-0.15,0};
//    ur5e_gripper.com_plan_CartsianPath(down,1);
//    ros::Duration(2).sleep();


    ur5e_gripper.robotiq_hand_move(32,5,50);
    ros::Duration(4).sleep();

//    物体附在机器人上
    move_group.attachObject(collision_object.id);


//    带着物体上移
    double up[] ={0,0,0.15,0};
    ur5e_gripper.com_plan_CartsianPath(up,1);
    ros::Duration(2).sleep();

//    target_pose_up.orientation = start_pose.orientation;
//    move_group.setPoseTarget(target_pose_up);
//    move_group.move();
//    ros::Duration(2).sleep();


//    double back_point_plan[] = {0,0,0.15,0, point_up_collectBox[0],point_up_collectBox[1],point_up_collectBox[2],1};
//    ur5e_gripper.com_plan_CartsianPath(back_point_plan,2);

    double back[] = { point_up_collectBox[0],point_up_collectBox[1],point_up_collectBox[2],1 };
    ur5e_gripper.com_plan_CartsianPath( back,1);


    ur5e_gripper.robotiq_hand_move(85,5,50);

//    移除障碍物
    move_group.detachObject(collision_object.id);
    ros::Duration(3).sleep();

//    移动到另一个位置
//    geometry_msgs::Pose target_pose2 = move_group.getCurrentPose().pose;
//    target_pose2.position.z += 0.05;
//    move_group.setPoseTarget(target_pose2);
//    move_group.move();

//    删除障碍物
    ros::Duration(3).sleep();
    std::vector<std::string> object_ids;
    object_ids.push_back(collision_object.id);
    planning_scene_interface.removeCollisionObjects(object_ids);

    ros::shutdown();
//    ros::waitForShutdown();
    return 1;
}